---
description: 本指南用于在 Logseq AI 搜索插件中实现简单的本地向量存储。我们的目标是实现基于本地 embedding 的、以 logseq笔记软件中的最小单位 `block` 为单位的向量搜索功能。  我们采用最简单的方案：**JSON 文件存储 + 纯 JavaScript 向量搜索**，这种方案简单、可靠、无需复杂依赖。
alwaysApply: false
---
# 简单向量存储使用指南

本指南用于在 Logseq AI 搜索插件中实现简单的本地向量存储。我们的目标是实现基于本地 embedding 的、以 logseq笔记软件中的最小单位 `block` 为单位的向量搜索功能。

我们采用最简单的方案：**localStorage 存储 + 纯 JavaScript 向量搜索**，这种方案简单、可靠、无需复杂依赖。

## 核心架构原则

### 1. 存储策略选择

**首选方案：localStorage**
- 在 Logseq 插件环境中最可靠
- 无需复杂的 API 调用
- 直接可用，无兼容性问题
- 容量限制：通常 5-10MB，对大多数使用场景足够

**避免的方案：**
- IndexedDB：在 Logseq 插件环境中可能有兼容性问题【已测试，不行！】
- Logseq Assets API：方法名和文档可能不一致，存在版本兼容性风险【存疑？】

### 2. 数据结构设计

**向量数据结构：**
- blockUUID: 唯一标识符
- pageName: 页面名称
- blockContent: 块内容
- vector: 向量数组（number[]）
- lastUpdated: 时间戳

**存储键值策略：**
- 使用统一的存储键：`'ai-search-vector-data'`
- 直接存储完整的向量数据数组
- 包含元数据（总数、更新时间等）

### 3. 错误处理和容量管理

**容量检测：**
- 使用 try-catch 捕获 QuotaExceededError
- 提供清晰的错误提示和解决建议
- 考虑数据压缩或清理旧数据

**渐进式保存：**
- 支持增量保存和构建进度显示
- 每处理一定数量后保存进度
- 避免长时间无响应的构建过程

### 4. 性能优化策略

**索引构建优化：**
- 批处理：使用 Promise.all() 并行处理多个 blocks
- 进度显示：每1000条显示一次进度，提升用户体验
- 增量保存：每100个 blocks 保存一次，避免数据丢失

**搜索优化：**
- 相似度阈值过滤：设置合理阈值（如0.3）过滤低相关结果
- 限制搜索结果数量：默认50个结果平衡性能和完整性
- 使用余弦相似度：计算效率高，效果好

### 5. 调试和维护

**调试命令：**
- 提供查看向量数据详情的命令
- 提供清除数据的命令
- 显示构建状态和统计信息

**状态管理：**
- 跟踪索引构建状态
- 提供数据统计（总数、维度、时间戳）
- 支持重建和清理操作

## 技术实现要点

### 1. 向量计算

**相似度计算：**
- 使用余弦相似度：适合高维向量比较
- 标准化处理：确保向量长度一致性
- 性能优化：避免不必要的计算

### 2. 数据管理

**增量更新：**
- 检测内容变化
- 只更新修改过的 blocks
- 保持数据一致性

**内存管理：**
- 按需加载向量数据
- 及时释放不需要的内存
- 避免内存泄漏

### 3. 并发处理

**异步操作：**
- 使用 async/await 处理异步操作
- 避免阻塞 UI 线程
- 合理的并发控制

## 故障排除指南

### 1. 存储问题

**QuotaExceededError：**
- 清理浏览器存储
- 减少索引的 blocks 数量
- 考虑数据压缩

### 2. API 兼容性

**Logseq API 变化：**
- 优先使用稳定的 API
- 提供降级方案
- 及时更新 API 使用方式

### 3. 性能问题

**搜索缓慢：**
- 检查向量数据量
- 优化相似度计算
- 考虑索引优化

**构建失败：**
- 检查 embedding 服务状态
- 验证网络连接
- 查看错误日志

## 实际经验总结

**关键教训：**
1. 在 Logseq 环境中，简单方案往往比复杂方案更可靠
2. localStorage 虽有限制，但对大多数场景足够
3. 用户体验比技术复杂度更重要
4. 错误处理和进度反馈不可忽视
5. 保持配置简单，避免过度设计

**成功因素：**
1. 优先考虑兼容性和稳定性
2. 提供清晰的错误提示和解决方案
3. 实现渐进式功能，支持部分失败场景
4. 重视性能优化和用户体验
5. 保持代码简洁，易于维护和调试

## 参考资源

- [Logseq Plugin API](https://plugins-doc.logseq.com/) - 了解 Logseq 插件开发
- [向量搜索最佳实践](https://www.pinecone.io/learn/vector-search/) - 了解向量搜索的理论基础
- [JavaScript 性能优化](https://web.dev/performance/) - 了解前端性能优化技巧

